[{"title":"扩展欧几里得2（exgcd的最小正整数解，通解）","uid":"f37560f9bc1b5fea2432f5534d910cca","slug":"扩展欧几里得2","date":"2023-07-19T13:53:28.000Z","updated":"2023-08-25T14:16:32.938Z","comments":true,"path":"api/articles/扩展欧几里得2.json","cover":"/img/codeforces.jpg","text":"由exgcd我们可以得到如下式子的一对解，前提是有解。ax+by&#x3D;c; (c%gcd(a,b)&#x3D;&#x3D;0)设一组解为x1,y1;即ax1+by1&#x3D;c; 记 u &#x3D; a*b&#x2F;gcd(a,b); 通解为:x&#x3D;x1+u&...","link":"","photos":[],"count_time":{"symbolsCount":398,"symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":37,"path":"api/tags/ACM.json"},{"name":"exgcd","slug":"exgcd","count":1,"path":"api/tags/exgcd.json"},{"name":"最小正整数解","slug":"最小正整数解","count":1,"path":"api/tags/最小正整数解.json"},{"name":"通解","slug":"通解","count":1,"path":"api/tags/通解.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"feature":true},{"title":"ACM学习笔记day39(树状数组)","uid":"7710f88b0aefcb65b0ee353b8ff291a3","slug":"ACM学习笔记day39","date":"2023-07-18T14:56:43.000Z","updated":"2023-08-25T14:17:44.654Z","comments":true,"path":"api/articles/ACM学习笔记day39.json","cover":"/img/codeforces.jpg","text":"树状数组的板子。 有几个小结论需要记住。 每个结点t[x]保存以x为根的子树中叶结点值的和 每个结点覆盖的长度为lowbit(x) t[x]结点的父结点为t[x + lowbit(x)] 树的深度为log2n+1 理解树状数组的图为: lowbit操作： int lowbit(i...","link":"","photos":[],"count_time":{"symbolsCount":543,"symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"数据结构","slug":"数据结构","count":21,"path":"api/tags/数据结构.json"},{"name":"binary index tree","slug":"binary-index-tree","count":1,"path":"api/tags/binary-index-tree.json"},{"name":"树状数组","slug":"树状数组","count":1,"path":"api/tags/树状数组.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"feature":true},{"title":"ACM学习笔记day38(最小生成树,染色法判定二分图，匈牙利算法)","uid":"aade77e076015616546b7ec40503f52f","slug":"ACM学习笔记day38","date":"2023-03-25T12:51:23.000Z","updated":"2023-08-25T14:17:28.624Z","comments":true,"path":"api/articles/ACM学习笔记day38.json","cover":"/img/codeforces.jpg","text":"在总结了各种的最短路算法之后，我们终于也是迎来了，图论基础算法的最后一部分内容。一个是最小生成树的求法。一个是有关二分图的问题。 关于这部分的内容，可以看下面这个大致的思维导图。 最小生成树对于基础的图论。最小生成树一共有两种算法。一种是prim算法，一种就是kruskal算法。...","link":"","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":37,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"Prim","slug":"Prim","count":1,"path":"api/tags/Prim.json"},{"name":"Kruskal","slug":"Kruskal","count":1,"path":"api/tags/Kruskal.json"},{"name":"染色法","slug":"染色法","count":1,"path":"api/tags/染色法.json"},{"name":"二分图","slug":"二分图","count":1,"path":"api/tags/二分图.json"},{"name":"匈牙利算法","slug":"匈牙利算法","count":1,"path":"api/tags/匈牙利算法.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"feature":true}]