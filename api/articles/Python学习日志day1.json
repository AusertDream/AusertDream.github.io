{"title":"Python学习日志day1","uid":"9440b99fb66535a63cc60a8f05ed5e66","slug":"Python学习日志day1","date":"2023-02-23T05:38:44.000Z","updated":"2023-04-08T10:58:05.857Z","comments":true,"path":"api/articles/Python学习日志day1.json","keywords":null,"cover":"/img/Python.jpg","content":"<p>emm，因为导师要求，所以需要学习一下py，同时可能要为数据库的课设作语言准备，所以就另外开了这样的一个日志。</p>\n<p>不过虽说是学习日志，这里我也基本上只会放一些容易忘记的函数啥的。</p>\n<p>不会有其他的东西了。qwq</p>\n<span id=\"more\"></span>\n\n<h1 id=\"关于字符串\"><a href=\"#关于字符串\" class=\"headerlink\" title=\"关于字符串\"></a>关于字符串</h1><ol>\n<li>字符串.title()这个函数可以使得字符串里面每一个单词的首字母大写。 e.g “abc hi!”.title()就变成了”Abc Hi!”<br> 而对应的lower()函数和upper()函数，可以使得字符串内部的每一个字母都小写或者大写。</li>\n<li>f”{string}{string}”可以实现字符串相加的功能，其实就是一样的（<del>那我干嘛不用相加</del><br> 对了，f”string{string}”这个也可以这么用，就是相当于你造了个句子，然后用{}表示里面要填入特定位置的一些内容，这样的话会比直接用加法要方便的。</li>\n<li>string.rstrip()操作是将字符串的右边空格给去掉，当然他不是直接修改原来的值，而是将修改后的string作为返回值的。<br> 也就是说如果只是调用这个函数，那么输出的就是删除之后的结果，而原来的string是不会被改变的，如果要改变，需要更新到原来的string上去。<br> lstrip()就是去掉左边的空格，strip()是去掉两边的空格。其他的和上面那个一样的。</li>\n</ol>\n<h1 id=\"关于列表\"><a href=\"#关于列表\" class=\"headerlink\" title=\"关于列表\"></a>关于列表</h1><ol>\n<li>在给数字赋值的时候如果数字里面有下划线，没关系，py会自动忽视这个下换线。e.g a&#x3D;1_000_000_000，实际上a就赋值成了1000000000。当然这个下划线不能出现在数字的一开始（</li>\n<li>列表中尾部加入元素使用append()函数。<br>插入函数insert(index,value)插入的位置是index的前面的地方。<br>如果要删除一个数据的话，知道下标的可以使用del语句,e.g del array_name[index]这样。<br>如果不知道下标，那么可以使用pop函数，他默认删除的是列表的最后一个元素，同时函数会返回这个元素的值。array_name.pop()删除最后一个元素，同时返回它。<br>当然如果括号里面写入index的话，就可以删除任意一个元素了。<br>如果不知道要删除的下标，只是要删除对应的值，那么可以使用remove()方法。e.g array_name.remove(value)，注意remove只会删除第一个对应值的元素，如果有多个，只会删掉第一个。</li>\n</ol>\n","text":"emm，因为导师要求，所以需要学习一下py，同时可能要为数据库的课设作语言准备，所以就另外开了这样的一个日志。 不过虽说是学习日志，这里我也基本上只会放一些容易忘记的函数啥的。 不会有其他的东西了。qwq 关于字符串 字符串.title()这个函数可以使得字符串里面每一个单词的首...","link":"","photos":[],"count_time":{"symbolsCount":990,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"},{"name":"语言","slug":"语言","count":3,"path":"api/tags/语言.json"},{"name":"基础","slug":"基础","count":3,"path":"api/tags/基础.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">关于字符串</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">关于列表</span></a></li></ol>","author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"mapped":true,"prev_post":{"title":"Python学习日志day2","uid":"a7b5056260bafa19bfefd98278cc6498","slug":"Python学习日志day2","date":"2023-02-26T14:02:34.000Z","updated":"2023-04-08T10:58:19.018Z","comments":true,"path":"api/articles/Python学习日志day2.json","keywords":null,"cover":"/img/Python.jpg","text":"emm，是学习py的第二天力。 下周就要开始搞数据库课设力！ 要G力 anyway,之后py还是要学的，毕竟想自己搞个bot玩玩XD 关于sort方法sort()方法py中的sort使用方法和cpp中的有略微的不同。 cpp中是直接使用sort函数，然后里面放入形参就是了， 但是...","link":"","photos":[],"count_time":{"symbolsCount":921,"symbolsTime":"1 mins."},"categories":[{"name":"Python","slug":"Python","count":4,"path":"api/categories/Python.json"}],"tags":[{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"python","slug":"python","count":3,"path":"api/tags/python.json"},{"name":"语言","slug":"语言","count":3,"path":"api/tags/语言.json"},{"name":"基础","slug":"基础","count":3,"path":"api/tags/基础.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}},"next_post":{"title":"ACM学习笔记day32 (数字三角形，最长上升子序列)","uid":"0c3e2aa6872231e13fd503f7a08ea40b","slug":"ACM学习笔记day32","date":"2023-02-20T14:18:20.000Z","updated":"2023-04-08T10:53:21.330Z","comments":true,"path":"api/articles/ACM学习笔记day32.json","keywords":null,"cover":"/img/codeforces.jpg","text":"今天的内容是数字三角形，和最长上升子序列。其中最长上升子序列可以说是dp问题里面非常经典的问题了。 数字三角形对于这个题，我们的dp思路其实很简单。当然在此之前，我们需要定义一下这个三角形的行和列。给的三角形是这样的: 7 3 8 8 1 0 2 7 4 4 4 5 2 6 5 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":37,"path":"api/tags/ACM.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"DP","slug":"DP","count":5,"path":"api/tags/DP.json"},{"name":"动态规划","slug":"动态规划","count":5,"path":"api/tags/动态规划.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}}}