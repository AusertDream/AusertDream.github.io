{"title":"ACM学习笔记day11(Trie树)","uid":"cf4a03b1403b8a8d56d4650e2b121d28","slug":"ACM学习笔记day11","date":"2022-11-20T13:36:27.000Z","updated":"2023-04-08T10:50:36.627Z","comments":true,"path":"api/articles/ACM学习笔记day11.json","keywords":null,"cover":"/img/codeforces.jpg","content":"<p>Hello guys！<br>今天学习的内容是Trie树，应该也是叫字典树<br><a href=\"https://www.acwing.com/problem/content/837/\">题目链接acwing</a></p>\n<span id=\"more\"></span>\n<p>直接上代码吧<br>理解不难</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;iostream&gt;\n#include&lt;string&gt;\nusing namespace std;\nconst int N &#x3D;100010;\nint son[N][26],idx,n,cnt[N]; &#x2F;&#x2F;son[i][j]表示第i个节点的第j个孩子节点，idx表示目前的最大节点，cnt[i]表示到第i个节点构成的string的个数\n&#x2F;&#x2F;Trie树插入一个string\nvoid insert(string s)&#123;\n    int p&#x3D;0; &#x2F;&#x2F;p表示当前节点\n    for(int i&#x3D;0;i&lt;s.size();i++)&#123;\n        int t&#x3D;s[i]-&#39;a&#39;; &#x2F;&#x2F;t用来表示是哪个字母\n        if(son[p][t]&#x3D;&#x3D;0)&#123;  &#x2F;&#x2F;如果没有这个孩子节点，也就是没有这个字母的孩子节点\n            son[p][t]&#x3D;++idx; &#x2F;&#x2F;那就新建一个节点\n        &#125;\n        p&#x3D;son[p][t]; &#x2F;&#x2F;让p指向目前的那个节点，也就是最新的那个节点\n    &#125;\n    cnt[p]++; &#x2F;&#x2F;上面创建完了之后，让cnt计数自加一个，表示这里有一个string\n&#125;\n&#x2F;&#x2F;查找一个string\nint query(string s)&#123; &#x2F;&#x2F;思路和创建类似\n    int p&#x3D;0; &#x2F;&#x2F;p表示当前节点\n    for(int i&#x3D;0;i&lt;s.size();i++)&#123;\n        int t&#x3D;s[i]-&#39;a&#39;; &#x2F;&#x2F;t表示是哪个字母\n        if(son[p][t]&#x3D;&#x3D;0)&#123;\n            return 0; &#x2F;&#x2F;如果不存在这个孩子节点的话直接返回零就可以了 \n        &#125;\n        p&#x3D;son[p][t];&#x2F;&#x2F; 让p前往当前的节点\n    &#125;\n    return cnt[p]; &#x2F;&#x2F;返回cnt的值，表示有几个这个字符串\n&#125;\n\nint main()&#123;\n    cin&gt;&gt;n;\n    while(n--)&#123;\n        char op;\n        cin&gt;&gt;op;\n        if(op&#x3D;&#x3D;&#39;I&#39;)&#123;\n            string s;\n            cin&gt;&gt;s;\n            insert(s);\n        &#125;\n        else&#123;\n            string s;\n            cin&gt;&gt;s;\n            cout&lt;&lt;query(s)&lt;&lt;endl;\n        &#125;\n    &#125;\n    \n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>总之Trie树的话，理解起来还是不难的<br>关于代码的实现，理解起来有点费劲<br>不过也还好<br>That’s all<br>bye~</p>\n","text":"Hello guys！今天学习的内容是Trie树，应该也是叫字典树题目链接acwing 直接上代码吧理解不难 #include&lt;iostream&gt; #include&lt;string&gt; using namespace std; const int N &#x3...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"}],"toc":"","author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"mapped":true,"prev_post":{"title":"ACM学习笔记day12(最大异或对，并查集)","uid":"5299e436ed1961fa0cb39dca432850d2","slug":"ACM学习笔记day12","date":"2022-11-24T14:50:04.000Z","updated":"2023-04-08T10:50:43.082Z","comments":true,"path":"api/articles/ACM学习笔记day12.json","keywords":null,"cover":"/img/codeforces.jpg","text":"今天的内容是Trie树的应用和并查集的学习。这个最大异或对的话，就是Trie树的应用，然后有别于之前那个Trie树存的数据不一样，之前那个存的是char，现在这个存的是0和1。然后并查集的话感觉就是构建了一个森林，然后每一颗树代表了一定的信息。 最大异或对最大异或对。题目是啥呢，...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"},{"name":"并查集","slug":"并查集","count":2,"path":"api/tags/并查集.json"},{"name":"Trie树","slug":"Trie树","count":1,"path":"api/tags/Trie树.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}},"next_post":{"title":"ACM学习笔记day10(KMP)","uid":"f3213b374a759ee017011c4487f29020","slug":"ACM学习笔记day10","date":"2022-11-19T14:38:53.000Z","updated":"2023-04-08T10:49:28.522Z","comments":true,"path":"api/articles/ACM学习笔记day10.json","keywords":null,"cover":"/img/codeforces.jpg","text":"今天的学习内容是！KMP！呃呃呃，理解了大概两天的样子，现在终于是差不多有点理解了。 KMP题目链接acwingKMP算法用于两个字符串匹配的时候提供一个线性时间复杂度的做法。其中一个关键的东西，就是next数组next数组定义：next[i]的值，表示主串匹配到第i位的时候，第...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"},{"name":"KMP","slug":"KMP","count":1,"path":"api/tags/KMP.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}}}