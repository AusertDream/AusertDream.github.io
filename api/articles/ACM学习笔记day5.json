{"title":"ACM学习笔记day5(双指针，位运算)","uid":"ceed889808223c52789eb0c0c60367bf","slug":"ACM学习笔记day5","date":"2022-11-10T09:25:34.000Z","updated":"2023-04-08T10:48:56.517Z","comments":true,"path":"api/articles/ACM学习笔记day5.json","keywords":null,"cover":"/img/codeforces.jpg","content":"<p>今天学习了一下双指针算法，感觉还是挺难的。<br>就是一个由单调性可以推出应该用双指针这个有点不是很能理解。QAQ<br>还有个位运算。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"求最长无重复数字的子串问题\"><a href=\"#求最长无重复数字的子串问题\" class=\"headerlink\" title=\"求最长无重复数字的子串问题\"></a>求最长无重复数字的子串问题</h2><hr>\n<h2 id=\"采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j-，直到没有相同数字为止。然后去更新ans，取ans和i-j-1中大的那个而应该怎么去检查里面有没有相同数字呢。这里我们用到一个check数组，check数组的长度就是所给数据的最大值-1-然后对于里面的每一个数字，比如a-i-，让check-a-i-表示数字大小为a-i-的数字有一个，在i和j移动的时候，i每次加1就代表有一个数字加入，此时让check-a-i-而每次j移动的时候，相当于从尾部删掉一个数字，也就是check-a-j-–这里循环移动j的时候，循环条件就是check-a-i-gt-1我们是默认i和j中间的序列是没有重复数字的，i前进了1，如果有重复数字了，就让j移动，直到没有。下面看看代码-位运算\"><a href=\"#采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j-，直到没有相同数字为止。然后去更新ans，取ans和i-j-1中大的那个而应该怎么去检查里面有没有相同数字呢。这里我们用到一个check数组，check数组的长度就是所给数据的最大值-1-然后对于里面的每一个数字，比如a-i-，让check-a-i-表示数字大小为a-i-的数字有一个，在i和j移动的时候，i每次加1就代表有一个数字加入，此时让check-a-i-而每次j移动的时候，相当于从尾部删掉一个数字，也就是check-a-j-–这里循环移动j的时候，循环条件就是check-a-i-gt-1我们是默认i和j中间的序列是没有重复数字的，i前进了1，如果有重复数字了，就让j移动，直到没有。下面看看代码-位运算\" class=\"headerlink\" title=\"采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j++，直到没有相同数字为止。然后去更新ans，取ans和i-j+1中大的那个而应该怎么去检查里面有没有相同数字呢。这里我们用到一个check数组，check数组的长度就是所给数据的最大值+1,然后对于里面的每一个数字，比如a[i]，让check[a[i]]++表示数字大小为a[i]的数字有一个，在i和j移动的时候，i每次加1就代表有一个数字加入，此时让check[a[i]]++而每次j移动的时候，相当于从尾部删掉一个数字，也就是check[a[j]]–这里循环移动j的时候，循环条件就是check[a[i]]&gt;1我们是默认i和j中间的序列是没有重复数字的，i前进了1，如果有重复数字了，就让j移动，直到没有。下面看看代码:位运算\"></a>采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。<br>如果在j到i这块子串有相同的数字，则让j++，直到没有相同数字为止。<br>然后去更新ans，取ans和i-j+1中大的那个<br>而应该怎么去检查里面有没有相同数字呢。<br>这里我们用到一个check数组，check数组的长度就是所给数据的最大值+1,<br>然后对于里面的每一个数字，比如a[i]，让check[a[i]]++<br>表示数字大小为a[i]的数字有一个，在i和j移动的时候，i每次加1<br>就代表有一个数字加入，此时让check[a[i]]++<br>而每次j移动的时候，相当于从尾部删掉一个数字，也就是check[a[j]]–<br>这里循环移动j的时候，循环条件就是check[a[i]]&gt;1<br>我们是默认i和j中间的序列是没有重复数字的，i前进了1，如果有重复数字了，就让j移动，直到没有。<br>下面看看代码:<br><pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\nconstexpr auto INF &#x3D; 2100000000;\nconstexpr auto INF64 &#x3D; 1e18;\nconst int N &#x3D; 100010;\n\nint check[N]; &#x2F;&#x2F;检测数组，下面表示数字的值，数组的值表示里面有几个这个数字\n\nint main()\n&#123;\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i &#x3D; 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    int ans &#x3D; 0;\n    for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i++) &#123;\n        check[a[i]]++;\n        while (check[a[i]] &gt; 1) &#123; &#x2F;&#x2F;如果有相同数字，是因为新加进来的第i个数字的原因，所以我们循环j直到没有重复数字位置\n            check[a[j]]--;\n            j++;\n        &#125;\n        ans &#x3D; max(ans, i-j + 1);\n    &#125;\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>位运算</h2><hr>\n<p>有个常用的函数，lowbit函数，对于lowbit(x)返回，x在二进制下最后一个1。<br>e.g: 1010 如果lowbit(10)&#x3D;（10）2.<br>他返回的是最后一个1以及他后面的一串零，结果是十进制形式的.<br>所以我们也可以通过这个，来给一个数字消掉最后一个1，例如</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int x;\ncin&gt;&gt;x;\nx-&#x3D;lowbit(x); &#x2F;&#x2F;这样就可以让x的最后一个1转化为零。二进制下<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>同时也有一个常用操作</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int x;\ncin&gt;&gt;x;\nx&gt;&gt;k&amp;1; &#x2F;&#x2F;表示，对于数字x在二进制下，返回第k位的值是多少。 挺好理解的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n\n\n\n\n\n\n\n","text":"今天学习了一下双指针算法，感觉还是挺难的。就是一个由单调性可以推出应该用双指针这个有点不是很能理解。QAQ还有个位运算。 求最长无重复数字的子串问题 采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j++...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":38,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":21,"path":"api/tags/数据结构.json"},{"name":"双指针","slug":"双指针","count":1,"path":"api/tags/双指针.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B1%82%E6%9C%80%E9%95%BF%E6%97%A0%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97%E7%9A%84%E5%AD%90%E4%B8%B2%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">求最长无重复数字的子串问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%87%E7%94%A8%E5%8F%8C%E6%8C%87%E9%92%88%E7%9A%84%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%9D%EF%BC%8C%E6%88%91%E4%BB%AC%E8%AE%A9i%E4%BB%8E%E5%A4%B4%E5%88%B0%E5%B0%BE%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84%EF%BC%8C%E5%AF%B9%E4%BA%8E%E6%AF%8F%E4%B8%80%E4%B8%AAi%EF%BC%8Cj%E8%A1%A8%E7%A4%BA%E5%BD%93%E5%89%8D%E5%AD%90%E4%B8%B2%E7%9A%84%E5%B7%A6%E8%BE%B9%E7%95%8C%E3%80%82%E5%A6%82%E6%9E%9C%E5%9C%A8j%E5%88%B0i%E8%BF%99%E5%9D%97%E5%AD%90%E4%B8%B2%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84%E6%95%B0%E5%AD%97%EF%BC%8C%E5%88%99%E8%AE%A9j-%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%B2%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E6%95%B0%E5%AD%97%E4%B8%BA%E6%AD%A2%E3%80%82%E7%84%B6%E5%90%8E%E5%8E%BB%E6%9B%B4%E6%96%B0ans%EF%BC%8C%E5%8F%96ans%E5%92%8Ci-j-1%E4%B8%AD%E5%A4%A7%E7%9A%84%E9%82%A3%E4%B8%AA%E8%80%8C%E5%BA%94%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8E%BB%E6%A3%80%E6%9F%A5%E9%87%8C%E9%9D%A2%E6%9C%89%E6%B2%A1%E6%9C%89%E7%9B%B8%E5%90%8C%E6%95%B0%E5%AD%97%E5%91%A2%E3%80%82%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E7%94%A8%E5%88%B0%E4%B8%80%E4%B8%AAcheck%E6%95%B0%E7%BB%84%EF%BC%8Ccheck%E6%95%B0%E7%BB%84%E7%9A%84%E9%95%BF%E5%BA%A6%E5%B0%B1%E6%98%AF%E6%89%80%E7%BB%99%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC-1-%E7%84%B6%E5%90%8E%E5%AF%B9%E4%BA%8E%E9%87%8C%E9%9D%A2%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E6%AF%94%E5%A6%82a-i-%EF%BC%8C%E8%AE%A9check-a-i-%E8%A1%A8%E7%A4%BA%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F%E4%B8%BAa-i-%E7%9A%84%E6%95%B0%E5%AD%97%E6%9C%89%E4%B8%80%E4%B8%AA%EF%BC%8C%E5%9C%A8i%E5%92%8Cj%E7%A7%BB%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8Ci%E6%AF%8F%E6%AC%A1%E5%8A%A01%E5%B0%B1%E4%BB%A3%E8%A1%A8%E6%9C%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%E5%8A%A0%E5%85%A5%EF%BC%8C%E6%AD%A4%E6%97%B6%E8%AE%A9check-a-i-%E8%80%8C%E6%AF%8F%E6%AC%A1j%E7%A7%BB%E5%8A%A8%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E7%9B%B8%E5%BD%93%E4%BA%8E%E4%BB%8E%E5%B0%BE%E9%83%A8%E5%88%A0%E6%8E%89%E4%B8%80%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AFcheck-a-j-%E2%80%93%E8%BF%99%E9%87%8C%E5%BE%AA%E7%8E%AF%E7%A7%BB%E5%8A%A8j%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%BE%AA%E7%8E%AF%E6%9D%A1%E4%BB%B6%E5%B0%B1%E6%98%AFcheck-a-i-gt-1%E6%88%91%E4%BB%AC%E6%98%AF%E9%BB%98%E8%AE%A4i%E5%92%8Cj%E4%B8%AD%E9%97%B4%E7%9A%84%E5%BA%8F%E5%88%97%E6%98%AF%E6%B2%A1%E6%9C%89%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97%E7%9A%84%EF%BC%8Ci%E5%89%8D%E8%BF%9B%E4%BA%861%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97%E4%BA%86%EF%BC%8C%E5%B0%B1%E8%AE%A9j%E7%A7%BB%E5%8A%A8%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%B2%A1%E6%9C%89%E3%80%82%E4%B8%8B%E9%9D%A2%E7%9C%8B%E7%9C%8B%E4%BB%A3%E7%A0%81-%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j++，直到没有相同数字为止。然后去更新ans，取ans和i-j+1中大的那个而应该怎么去检查里面有没有相同数字呢。这里我们用到一个check数组，check数组的长度就是所给数据的最大值+1,然后对于里面的每一个数字，比如a[i]，让check[a[i]]++表示数字大小为a[i]的数字有一个，在i和j移动的时候，i每次加1就代表有一个数字加入，此时让check[a[i]]++而每次j移动的时候，相当于从尾部删掉一个数字，也就是check[a[j]]–这里循环移动j的时候，循环条件就是check[a[i]]&gt;1我们是默认i和j中间的序列是没有重复数字的，i前进了1，如果有重复数字了，就让j移动，直到没有。下面看看代码:#include&lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\nconstexpr auto INF &#x3D; 2100000000;\nconstexpr auto INF64 &#x3D; 1e18;\nconst int N &#x3D; 100010;\n\nint check[N]; &#x2F;&#x2F;检测数组，下面表示数字的值，数组的值表示里面有几个这个数字\n\nint main()\n{\n    int n;\n    cin &gt;&gt; n;\n    vector&lt;int&gt; a(n);\n    for (int i &#x3D; 0; i &lt; n; i++) cin &gt;&gt; a[i];\n    int ans &#x3D; 0;\n    for (int i &#x3D; 0, j &#x3D; 0; i &lt; n; i++) {\n        check[a[i]]++;\n        while (check[a[i]] &gt; 1) { &#x2F;&#x2F;如果有相同数字，是因为新加进来的第i个数字的原因，所以我们循环j直到没有重复数字位置\n            check[a[j]]--;\n            j++;\n        }\n        ans &#x3D; max(ans, i-j + 1);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}位运算</span></a></li></ol>","author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"mapped":true,"prev_post":{"title":"ACM学习笔记day6(离散化)","uid":"1e7a8acd61656fdbe512e6f88b5aff86","slug":"ACM学习笔记day6","date":"2022-11-10T13:57:48.000Z","updated":"2023-04-08T10:49:10.497Z","comments":true,"path":"api/articles/ACM学习笔记day6.json","keywords":null,"cover":"/img/codeforces.jpg","text":"其实这一节，应该是day5里面的，因为呃呃呃我看到这一节acwing里面的视频长度比较长，所以我就分割出来作为单独的一个blog来写了。算法的思想比较重要。 离散化 题目acwing区间和说实话，离散化的概念不难理解但是实际运用起来，发现诶，用不来了 首先，什么是离散化？离散化一...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":38,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":21,"path":"api/tags/数据结构.json"},{"name":"离散化","slug":"离散化","count":1,"path":"api/tags/离散化.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}},"next_post":{"title":"ACM学习笔记day4(前缀和和差分)","uid":"4143f6a2444e4122fe8da477a7a2d540","slug":"ACM学习笔记day4","date":"2022-11-09T14:02:19.000Z","updated":"2023-04-08T10:49:05.915Z","comments":true,"path":"api/articles/ACM学习笔记day4.json","keywords":null,"cover":"/img/codeforces.jpg","text":"今天学了前缀和和差分，及其数组。前缀和不多说了，比较好理解，主要还是差分，这个比较抽象 前缀和主要注意一下，前缀和数组从1开始，0的位置就归零，这样就不用地方越界问题了。 差分至于差分。emmmm差分数组不需要构建，~~~当然也可以构建~~~二位差分同理 int a[N],B[N...","link":"","photos":[],"count_time":{"symbolsCount":875,"symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":40,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":38,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":21,"path":"api/tags/数据结构.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}}}