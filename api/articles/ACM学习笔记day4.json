{"title":"ACM学习笔记day4(前缀和和差分)","uid":"4143f6a2444e4122fe8da477a7a2d540","slug":"ACM学习笔记day4","date":"2022-11-09T14:02:19.000Z","updated":"2023-04-08T10:49:05.915Z","comments":true,"path":"api/articles/ACM学习笔记day4.json","keywords":null,"cover":"/img/codeforces.jpg","content":"<p>今天学了前缀和和差分，及其数组。<br><br>前缀和不多说了，比较好理解，主要还是差分，这个比较抽象<br></p>\n<span id=\"more\"></span>\n\n\n<h2 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h2><p>主要注意一下，前缀和数组从1开始，0的位置就归零，这样就不用地方越界问题了。</p>\n<hr>\n<h2 id=\"差分\"><a href=\"#差分\" class=\"headerlink\" title=\"差分\"></a>差分</h2><p>至于差分。emmmm<br><br>差分数组不需要构建，~~~当然也可以构建~~~<br><br>二位差分同理<br></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">int a[N],B[N]; &#x2F;&#x2F;a为原来的数组，b为差分数组\n&#x2F;&#x2F;执行差分的插入操作，即在l和r中间的数字都加上c。\nvoid insert(int l,int r,int c)&#123;\n    b[l]+&#x3D;c;\n    b[r+1]-&#x3D;c;\n&#125;\n\nvoid solve()&#123;\n    for(int i&#x3D;0;i&lt;n;i++)&#123;\n        int t;\n        cin&gt;&gt;t;\n        insert(i,i,t);&#x2F;&#x2F;这里相当于不用数组去存原来那个数组，原来那个数组就相当于对i和i中间的数字加上a[i]，也就是差分的思想。\n    &#125;\n    然后就是for循环，进行m次询问，同样操作。\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>然后二维差分的话，要注意一个点，就是你在差分数组的第ij个值的地方加了个c，<br><br>那么在行&gt;&#x3D;i,列&gt;&#x3D;j的后面所有数据<br><br>都加上了个c，这里的话要考虑一个容斥原理。<br><br>下面为insert代码：<br></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&#x2F;&#x2F;b数组为差分数组，c为要加的值\nvoid insert(int x1, int y1, int x2, int y2, int c) &#123;\n    b[x1][y1] +&#x3D; c;\n    b[x1][y2 + 1] -&#x3D; c;\n    b[x2 + 1][y1] -&#x3D; c;\n    b[x2 + 1][y2 + 1] +&#x3D; c;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>记住，差分数组不需要自己想着构建awa<br><br>That’s all<br><br>bye~</p>\n","text":"今天学了前缀和和差分，及其数组。前缀和不多说了，比较好理解，主要还是差分，这个比较抽象 前缀和主要注意一下，前缀和数组从1开始，0的位置就归零，这样就不用地方越界问题了。 差分至于差分。emmmm差分数组不需要构建，~~~当然也可以构建~~~二位差分同理 int a[N],B[N...","link":"","photos":[],"count_time":{"symbolsCount":875,"symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BC%80%E5%92%8C\"><span class=\"toc-text\">前缀和</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%AE%E5%88%86\"><span class=\"toc-text\">差分</span></a></li></ol>","author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"mapped":true,"prev_post":{"title":"ACM学习笔记day5(双指针，位运算)","uid":"ceed889808223c52789eb0c0c60367bf","slug":"ACM学习笔记day5","date":"2022-11-10T09:25:34.000Z","updated":"2023-04-08T10:48:56.517Z","comments":true,"path":"api/articles/ACM学习笔记day5.json","keywords":null,"cover":"/img/codeforces.jpg","text":"今天学习了一下双指针算法，感觉还是挺难的。就是一个由单调性可以推出应该用双指针这个有点不是很能理解。QAQ还有个位运算。 求最长无重复数字的子串问题 采用双指针的算法的话，我们让i从头到尾遍历数组，对于每一个i，j表示当前子串的左边界。如果在j到i这块子串有相同的数字，则让j++...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"},{"name":"双指针","slug":"双指针","count":1,"path":"api/tags/双指针.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}},"next_post":{"title":"ACM学习笔记day3(高精度四则运算)","uid":"ffffeb1fbf512f768ee4d72750569670","slug":"ACM学习笔记day3","date":"2022-11-08T14:01:59.000Z","updated":"2023-04-08T10:49:48.429Z","comments":true,"path":"api/articles/ACM学习笔记day3.json","keywords":null,"cover":"/img/codeforces.jpg","text":"学习ACM有关东西的第四天。今天用晚上时间稍微学了点高精度加减乘除的运算。感觉是在模拟人类的运算过程，除了乘法(这不废话)So,Here we go! 总述有必要说明一下，对于高精度的四则运算，加法和减法是两个高精度的数字，而乘法和除法是一个高精度乘或者除以一个数同时因为数字的位...","link":"","photos":[],"count_time":{"symbolsCount":"6.6k","symbolsTime":"6 mins."},"categories":[{"name":"ACM","slug":"ACM","count":38,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":36,"path":"api/tags/ACM.json"},{"name":"打卡","slug":"打卡","count":34,"path":"api/tags/打卡.json"},{"name":"学习","slug":"学习","count":41,"path":"api/tags/学习.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"数据结构","slug":"数据结构","count":20,"path":"api/tags/数据结构.json"},{"name":"蒟蒻","slug":"蒟蒻","count":4,"path":"api/tags/蒟蒻.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"喜欢前沿科技，想要见证人类科学的飞跃","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}}}