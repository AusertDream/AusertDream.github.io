{"title":"ACM学习笔记day18(dfs)","uid":"43196df8e77fd8e5155e9b94ef5532f4","slug":"ACM学习笔记day18","date":"2022-12-10T15:15:28.000Z","updated":"2023-04-08T10:51:30.587Z","comments":true,"path":"api/articles/ACM学习笔记day18.json","keywords":null,"cover":"/img/codeforces.jpg","content":"<p>今天的内容是dfs，对应的acwing<a href=\"https://www.acwing.com/problem/content/844/\">题目</a></p>\n<p>dfs深搜，不难理解，而且之前在白书上我也学过<br>啥意思也不多赘述<br>这里主要讲解一下这题的思路</p>\n<span id=\"more\"></span>\n\n\n<p>给你个n，让你求所有可能的排列组合，也就是求permutation<br>因为n很小，所有dfs能过<br>我们从第0个数字开始<br>接下来选第1个数字，有n中可能<br>对应的就是n个分叉<br>然后每个分叉又有n-1一种可能<br>直到选到了第n个数字，在存储上，也就是dfs(x)这个x到了n，因为我们存储的时候下标是从零开始的<br>可以理解为这个样子</p>\n<p><img src=\"https://raw.githubusercontent.com/AusertDream/MyblogImags/main/acwing%E6%8E%92%E5%88%97%E6%95%B0%E5%AD%97dfs%E6%80%9D%E8%B7%AF%E5%9B%BE.png\" alt=\"dfs思路图\"></p>\n<p>我们不断深入之后，到了底层，然后要回溯，回溯的时候这题不要忘了还原现场，也就是说，我们到了底层，所有的数字都拿过了，回溯的时候要把去掉的数字标记为没拿过<br>下面我们结合代码来看</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#include&lt;bits&#x2F;stdc++.h&gt;\nusing namespace std;\nconst int N &#x3D; 10;\nint path[N]; &#x2F;&#x2F;路径数组，用来表示结果的数字\nbool st[N]; &#x2F;&#x2F;状态数组，用来表示下标为i的数字有没有拿，这里下标是i就是数字i\nint n;\n\nvoid dfs(int x)&#123;\n    if(x&#x3D;&#x3D;n)&#123; &#x2F;&#x2F;如果x和n相等，标明已经集齐了n个数字，可以输出了\n        for(int i&#x3D;0;i&lt;n;i++)&#123;\n            cout&lt;&lt;path[i]&lt;&lt;&quot; &quot;;\n        &#125;\n        cout&lt;&lt;endl;\n        return ; \n    &#125;\n    for(int i&#x3D;1;i&lt;&#x3D;n;i++)&#123; &#x2F;&#x2F;从这个n个数字中一个一个去找，看那个是没有拿过的\n        if(!st[i])&#123; &#x2F;&#x2F;如果没拿过，也就是st值是零\n            path[x]&#x3D;i; &#x2F;&#x2F;将这个i存入我们的path中去\n            st[i]&#x3D;1; &#x2F;&#x2F;同时st表示为true\n            dfs(x+1); &#x2F;&#x2F;继续深入一层去\n            st[i]&#x3D;0; &#x2F;&#x2F;这里表示回溯的时候，还原现场，也就是对应的st[i]要为零，表示没拿过，因为你回溯了嘛\n        &#125;\n    &#125;\n&#125;\nint main()&#123;\n    cin&gt;&gt;n;\n    dfs(0); &#x2F;&#x2F;从0开始递归，如果从1的话，判断x和n相等的条件得是n+1\n    return 0;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>emm，今天刚考完六级，稍微水了点，先这样吧<br>bye~</p>\n","text":"今天的内容是dfs，对应的acwing题目 dfs深搜，不难理解，而且之前在白书上我也学过啥意思也不多赘述这里主要讲解一下这题的思路 给你个n，让你求所有可能的排列组合，也就是求permutation因为n很小，所有dfs能过我们从第0个数字开始接下来选第1个数字，有n中可能对应...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"ACM","slug":"ACM","count":42,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":39,"path":"api/tags/ACM.json"},{"name":"学习","slug":"学习","count":43,"path":"api/tags/学习.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"数据结构","slug":"数据结构","count":23,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"dfs","slug":"dfs","count":4,"path":"api/tags/dfs.json"}],"toc":"","author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"tech otakus save the world","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}},"mapped":true,"prev_post":{"title":"网站开发日志2(新增了图床)","uid":"d247f335debb5355e7105da57059aeeb","slug":"网站开发日志2","date":"2022-12-11T08:51:32.000Z","updated":"2023-08-27T09:18:15.701Z","comments":true,"path":"api/articles/网站开发日志2.json","keywords":null,"cover":[],"text":"emmm，日志是之后写的，实际的实现功能在之前就完成了这里只是补个开发日志而已 更新内容： 新增了图床，博客中可以上传图片了 简单学习了一下图床，现在所有的图片我都放图床上了那么接下来，我们博客里面也就能看到图片力！好耶！ ","link":"","photos":[],"count_time":{"symbolsCount":124,"symbolsTime":"1 mins."},"categories":[{"name":"个人博客开发","slug":"个人博客开发","count":2,"path":"api/categories/个人博客开发.json"}],"tags":[{"name":"学习","slug":"学习","count":43,"path":"api/tags/学习.json"},{"name":"网站部署","slug":"网站部署","count":2,"path":"api/tags/网站部署.json"},{"name":"网站开发","slug":"网站开发","count":2,"path":"api/tags/网站开发.json"},{"name":"网站维护","slug":"网站维护","count":2,"path":"api/tags/网站维护.json"},{"name":"图床","slug":"图床","count":1,"path":"api/tags/图床.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"tech otakus save the world","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}},"next_post":{"title":"ACM学习笔记day17(floyd算法求多源最短路)","uid":"633b5f64cd1a9eff1c65ad66ca026b45","slug":"ACM学习笔记day17","date":"2022-12-09T14:20:36.000Z","updated":"2023-04-08T10:51:22.699Z","comments":true,"path":"api/articles/ACM学习笔记day17.json","keywords":null,"cover":"/img/codeforces.jpg","text":"额，距离上次写ACM笔记好像已经过了很久了其实这是有原因(借口)的，在被模电折磨捏~好了，不多bb了今天学习的内容是Floyd算法求多源最短路。这个算法写起来东西很少，同时也比较简单，从整体上去理解的话，感觉还是不难理解的运用的思想就是DP的思想 直接上代码吧，思想是dp的思想，...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"ACM","slug":"ACM","count":42,"path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","slug":"ACM","count":39,"path":"api/tags/ACM.json"},{"name":"学习","slug":"学习","count":43,"path":"api/tags/学习.json"},{"name":"打卡","slug":"打卡","count":35,"path":"api/tags/打卡.json"},{"name":"数据结构","slug":"数据结构","count":23,"path":"api/tags/数据结构.json"},{"name":"算法","slug":"算法","count":20,"path":"api/tags/算法.json"},{"name":"Floyd","slug":"Floyd","count":1,"path":"api/tags/Floyd.json"},{"name":"图论","slug":"图论","count":3,"path":"api/tags/图论.json"}],"author":{"name":"Ausert","slug":"blog-author","avatar":"/img/Ausert.jpg","link":"/","description":"tech otakus save the world","socials":{"github":"https://github.com/AusertDream","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/102368527?spm_id_from=333.1007.0.0"},"codeforce":{"icon":"/svg/codeforces.svg","link":"https://codeforces.com/profile/Ausert"}}}}}}